workflows:
  ios-finance-manager:
    name: iOS Finance Manager App
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      vars:
        APP_NAME: "FinanceManagerApp"
        BUNDLE_ID: "io.codemagic.financemanager"
      xcode: latest
    scripts:
      - name: Examine project structure
        script: |
          echo "Project structure:"
          find . -type f -name "*.swift" | sort
          
          # Create a directory to consolidate files
          mkdir -p $CM_BUILD_DIR/FinanceManager
          cp -R ./* $CM_BUILD_DIR/FinanceManager/ || true
          cd $CM_BUILD_DIR/FinanceManager
          
          # List all Swift files
          echo "Swift files in project:"
          find . -name "*.swift" | sort
      
      - name: Create Xcode project
        script: |
          cd $CM_BUILD_DIR/FinanceManager
          
          # Create an Info.plist file if it doesn't exist
          if [ ! -f "Info.plist" ]; then
            cat > Info.plist << 'EOL'
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
                <key>CFBundleDevelopmentRegion</key>
                <string>$(DEVELOPMENT_LANGUAGE)</string>
                <key>CFBundleExecutable</key>
                <string>$(EXECUTABLE_NAME)</string>
                <key>CFBundleIdentifier</key>
                <string>io.codemagic.financemanager</string>
                <key>CFBundleInfoDictionaryVersion</key>
                <string>6.0</string>
                <key>CFBundleName</key>
                <string>$(PRODUCT_NAME)</string>
                <key>CFBundlePackageType</key>
                <string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
                <key>CFBundleShortVersionString</key>
                <string>1.0</string>
                <key>CFBundleVersion</key>
                <string>1</string>
                <key>LSRequiresIPhoneOS</key>
                <true/>
                <key>UIApplicationSceneManifest</key>
                <dict>
                    <key>UIApplicationSupportsMultipleScenes</key>
                    <true/>
                </dict>
                <key>UIApplicationSupportsIndirectInputEvents</key>
                <true/>
                <key>UILaunchScreen</key>
                <dict/>
                <key>UIRequiredDeviceCapabilities</key>
                <array>
                    <string>armv7</string>
                </array>
                <key>UISupportedInterfaceOrientations</key>
                <array>
                    <string>UIInterfaceOrientationPortrait</string>
                </array>
            </dict>
            </plist>
            EOL
          fi
          
          # Create an Xcode project using Swift Package Manager
          cat > Package.swift << 'EOL'
          // swift-tools-version:5.5
          import PackageDescription

          let package = Package(
              name: "FinanceManagerApp",
              platforms: [.iOS(.v14)],
              products: [
                  .library(name: "FinanceManagerApp", targets: ["FinanceManagerApp"]),
              ],
              targets: [
                  .target(
                      name: "FinanceManagerApp",
                      path: ".",
                      exclude: ["Package.swift"]
                  )
              ]
          )
          EOL
          
          # Generate Xcode project from Swift Package
          swift package generate-xcodeproj
          
          # Create a proper app target in the Xcode project
          cat > modify_xcodeproj.swift << 'EOL'
          import Foundation

          // Read the project.pbxproj file
          let projectPath = "FinanceManagerApp.xcodeproj/project.pbxproj"
          guard var projectContent = try? String(contentsOfFile: projectPath) else {
              print("Failed to read project file")
              exit(1)
          }

          // Add iOS deployment target to the project settings
          if !projectContent.contains("IPHONEOS_DEPLOYMENT_TARGET") {
              let targetLine = "IPHONEOS_DEPLOYMENT_TARGET = 14.0;"
              projectContent = projectContent.replacingOccurrences(
                  of: "buildSettings = {",
                  with: "buildSettings = {\n\t\t\t\t\t\(targetLine)"
              )
          }

          // Write the modified content back
          try? projectContent.write(toFile: projectPath, atomically: true, encoding: .utf8)
          print("Updated project with iOS 14.0 deployment target")
          EOL
          
          # Run the script to modify the project
          swift modify_xcodeproj.swift
      
      - name: Build for iOS simulator
        script: |
          cd $CM_BUILD_DIR/FinanceManager
          
          # Set simulator destination for iOS 14.0+
          DESTINATION="platform=iOS Simulator,name=iPhone 14,OS=latest"
          
          # Build with Xcode
          xcodebuild build \
            -project "FinanceManagerApp.xcodeproj" \
            -scheme "FinanceManagerApp" \
            -destination "${DESTINATION}" \
            -configuration Debug \
            IPHONEOS_DEPLOYMENT_TARGET=14.0 \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO
      
      - name: Find and list generated app files
        script: |
          echo "Finding built app files:"
          find $HOME/Library/Developer/Xcode/DerivedData -name "*.app" | grep -i finance
          
          # Copy app files to a more accessible location
          mkdir -p $CM_BUILD_DIR/artifacts
          find $HOME/Library/Developer/Xcode/DerivedData -name "*.app" -exec cp -R {} $CM_BUILD_DIR/artifacts/ \;
          
          echo "App files available in: $CM_BUILD_DIR/artifacts"
          ls -la $CM_BUILD_DIR/artifacts
    artifacts:
      - $CM_BUILD_DIR/artifacts/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - your-email@example.com # Replace with your actual email
        notify:
          success: true
          failure: true
        attachments: true # This ensures the app files are attached to the email
        release_notes: |
          Your Finance Manager iOS app has been built successfully!
          
          The app files can be found:
          1. In the email attachments (.app file)
          2. On the Codemagic dashboard in the Artifacts section
          3. In the build server at $HOME/Library/Developer/Xcode/DerivedData
          
          To install on your device, you'll need:
          - For simulators: Just download the .app file and open it
          - For real devices: You'll need to set up code signing with an Apple Developer account 
