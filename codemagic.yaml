workflows:
  ios-workflow:
    name: iOS Finance Manager Workflow
    instance_type: mac_mini_m2
    max_build_duration: 120
    inputs:
      xcode_version:
        description: Xcode version to use
        type: choice
        options: ["latest", "16.3", "16.2", "16.1", "16.0", "15.4"]
        default: latest
      submit_to_testflight:
        description: Submit build to TestFlight
        type: boolean
        default: false
      distribution_type:
        description: iOS distribution type
        type: choice
        options: ["app_store", "ad_hoc", "development"]
        default: development
    integrations:
      # Replace with your App Store Connect API key name after setting it up in Codemagic UI
      app_store_connect: app_store_connect_api_key_name
    environment:
      ios_signing:
        distribution_type: ${{ inputs.distribution_type }}
        # Bundle identifier must match your Apple Developer Portal registration
        bundle_identifier: io.codemagic.financemanager
      vars:
        BUNDLE_ID: "io.codemagic.financemanager"
        XCODE_PROJECT: "FinanceManager.xcodeproj" # Update this if your project name is different
        XCODE_SCHEME: "FinanceManagerApp" # Update this if your scheme name is different
      xcode: ${{ inputs.xcode_version }}
      cocoapods: default
    cache:
      cache_paths:
        - $HOME/Library/Caches/CocoaPods
        - $HOME/.gradle/caches
    scripts:
      - name: Install CocoaPods dependencies
        script: |
          pod install || true
      - name: Set up code signing
        script: |
          # Initialize keychain
          keychain initialize
          
          # For development or ad-hoc distribution
          if [ "${{ inputs.distribution_type }}" = "development" ] || [ "${{ inputs.distribution_type }}" = "ad_hoc" ]; then
            # Create development certificate and provisioning profile
            app-store-connect fetch-signing-files "$BUNDLE_ID" \
              --type ${{ inputs.distribution_type == 'ad_hoc' && 'IOS_APP_ADHOC' || 'IOS_APP_DEVELOPMENT' }} \
              --create
          else
            # Create app store distribution certificate and profile
            app-store-connect fetch-signing-files "$BUNDLE_ID" \
              --type IOS_APP_STORE \
              --create
          fi
          
          # Add certificates to keychain
          keychain add-certificates
          
          # Set up code signing settings
          xcode-project use-profiles
      - name: Build iOS app
        script: |
          xcode-project build-ipa \
            --project "$XCODE_PROJECT" \
            --scheme "$XCODE_SCHEME" \
            --configuration Release
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: ${{ inputs.submit_to_testflight }}
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true
          
  # Updated workflow for SwiftUI app with modern deployment targets
  ios-simulator:
    name: iOS Simulator Build
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      vars:
        APP_NAME: "FinanceManagerApp"
        BUNDLE_ID: "io.codemagic.financemanager"
        # Ensure we use a recent Xcode version that supports SwiftUI features
      xcode: latest
    scripts:
      - name: List project structure
        script: |
          echo "Project structure:"
          find . -type f -name "*.swift" | sort
      
      - name: Create Xcode project for SwiftUI app
        script: |
          # Navigate to clone directory
          cd $CM_BUILD_DIR
          
          # Create a temporary Xcode project
          mkdir -p TempProject
          cd TempProject
          
          # Create a basic SwiftUI app with appropriate deployment targets
          cat > create_project.swift << 'EOL'
          import Foundation

          let projectName = "FinanceManagerApp"
          
          // Create project.pbxproj content with iOS 14.0 minimum deployment target
          let pbxproj = """
          // !$*UTF8*$!
          {
            archiveVersion = 1;
            classes = {
            };
            objectVersion = 50;
            objects = {
              /* Begin PBXBuildFile section */
              /* End PBXBuildFile section */
              /* Begin PBXFileReference section */
              /* End PBXFileReference section */
              /* Begin PBXFrameworksBuildPhase section */
              /* End PBXFrameworksBuildPhase section */
              /* Begin PBXGroup section */
              /* End PBXGroup section */
              /* Begin PBXNativeTarget section */
              /* End PBXNativeTarget section */
              /* Begin PBXProject section */
                buildSettings = {
                  IPHONEOS_DEPLOYMENT_TARGET = 14.0;
                };
              /* End PBXProject section */
              /* Begin XCBuildConfiguration section */
                buildSettings = {
                  IPHONEOS_DEPLOYMENT_TARGET = 14.0;
                };
              /* End XCBuildConfiguration section */
            };
            rootObject = 1234567890ABCDEF1234567890ABCDEF;
          }
          """
          
          // Write to file
          try? FileManager.default.createDirectory(atPath: "\(projectName).xcodeproj", withIntermediateDirectories: true)
          try? pbxproj.write(toFile: "\(projectName).xcodeproj/project.pbxproj", atomically: true, encoding: .utf8)
          
          print("Created temporary Xcode project with iOS 14.0 deployment target")
          EOL
          
          # Run the Swift script
          swift create_project.swift
          
          # Move back to project directory
          cd ..
      
      - name: Build for iOS simulator with correct deployment target
        script: |
          # Ensure we create a proper SwiftUI app structure
          mkdir -p $CM_BUILD_DIR/TempProject/Sources
          
          # Copy all Swift files to the project
          find . -name "*.swift" -exec cp {} $CM_BUILD_DIR/TempProject/Sources/ \;
          
          # Set simulator destination for iOS 14.0+
          DESTINATION="platform=iOS Simulator,name=iPhone 14,OS=latest"
          
          # Build with Xcode explicitly setting the deployment target
          cd $CM_BUILD_DIR/TempProject
          xcodebuild build \
            -project "FinanceManagerApp.xcodeproj" \
            -configuration Debug \
            -destination "${DESTINATION}" \
            IPHONEOS_DEPLOYMENT_TARGET=14.0 \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO
    artifacts:
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - /tmp/xcodebuild_logs/*.log
    publishing:
      email:
        recipients:
          - your-email@example.com
        notify:
          success: true
          failure: true 
